#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

#pragma once

#undef CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS
#define CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS 30

#undef CONFIG_ZMK_MACRO_DEFAULT_TAP_MS
#define CONFIG_ZMK_MACRO_DEFAULT_TAP_MS 40

/* Canadian Multilingual Standard Mappings */

#define SLSH   GRAVE         // /
#define SAPOS  LS(COMMA)     // /
#define DAPOS  LS(DOT)     // /
#define DEG    RA(SEMI)      // °
#define LBRAC  RA(N7)        // {
#define RBRAC  RA(N8)        // }
#define LBKET  RA(N9)        // [
#define RBKET  RA(N0)        // ]
#define QUEST  LS(N6)        // ?
#define PIP    RA(GRAVE)     // |
#define TILDS  RA(RBKT)      // ~
#define LETHAN RA(COMMA)     // ≤
#define GRTHAN RA(DOT)       // ≥
#define ACC_CI LBKT          // ^
#define ACC_GR RA(LBKT)      // `
#define ACC_TR LS(LBKT)      // ¨

// The following must return to the base layer after being pressed
ZMK_BEHAVIOR(A_GR,  macro_one_param, bindings = <&kp BACKSLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)  // À
ZMK_BEHAVIOR(A_CI,  macro_one_param, bindings = <&fr_a_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Â
ZMK_BEHAVIOR(E_CU,  macro_one_param, bindings = <&kp SLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)      // É
ZMK_BEHAVIOR(E_GR,  macro_one_param, bindings = <&kp APOS>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // È
ZMK_BEHAVIOR(E_CI,  macro_one_param, bindings = <&fr_e_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ê
ZMK_BEHAVIOR(I_CI,  macro_one_param, bindings = <&fr_i_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Î
ZMK_BEHAVIOR(O_CI,  macro_one_param, bindings = <&fr_o_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ô
ZMK_BEHAVIOR(U_CI,  macro_one_param, bindings = <&fr_u_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Û
ZMK_BEHAVIOR(U_GR,  macro_one_param, bindings = <&fr_u_gr>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ù
ZMK_BEHAVIOR(AE_L, macro_one_param, bindings = <&fr_ae>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)          // Æ
ZMK_BEHAVIOR(OE_L, macro_one_param, bindings = <&fr_oe>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)          // Œ
ZMK_BEHAVIOR(CEDIL, macro_one_param, bindings = <&kp RBKT>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ç

// QWERTY Homerow Mods
ZMK_BEHAVIOR(E_GR_D, macro, bindings = <&kp APOS>, <&to DEF>;) // È
ZMK_BEHAVIOR(I_CI_D, macro, bindings = <&fr_i_cf>, <&to DEF>;) // Î

// Colemak Homerow Mods
ZMK_BEHAVIOR(E_GR_C, macro, bindings = <&kp APOS>, <&to COL>;) // È

// Ergo-L Homerow Mods
ZMK_BEHAVIOR(E_CI_E, macro, bindings = <&fr_e_cf>, <&to ERG>;) // Ê


// ` directly
ZMK_BEHAVIOR(GRA, macro, bindings =
    <&macro_press &kp RALT>,
    <&macro_tap &kp LBKT &kp LBKT>,
    <&macro_release &kp RALT>;
)

// ^ directly
ZMK_BEHAVIOR(CAR, macro, bindings =
    <&macro_tap &kp LBKT &kp SPACE>;
)

// ¨ directly
ZMK_BEHAVIOR(TREMA, macro_one_param, bindings =
    <&macro_tap &kp LS(LBKT) &kp SPACE>,
    <&macro_param_1to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ` to input
ZMK_BEHAVIOR(AGRA, macro_two_param, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ` to input then to default layer
ZMK_BEHAVIOR(AGRA_D, macro_one_param, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to DEF>;
)

// ´ to input
ZMK_BEHAVIOR(AIGU, macro_two_param, bindings =
    <&kp RA(SLASH)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ¨ to input
ZMK_BEHAVIOR(TREM, macro_two_param, bindings =
    <&kp LS(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ^ to input
ZMK_BEHAVIOR(CIRC, macro_two_param, bindings = 
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ^ to input then to default layer
ZMK_BEHAVIOR(CIRC_D, macro_one_param, bindings = 
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to DEF>;
)

// Keypress then return to default layer
ZMK_BEHAVIOR(KPD, macro_two_param, bindings =
    <&macro_param_1to1>,
    <&kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)
